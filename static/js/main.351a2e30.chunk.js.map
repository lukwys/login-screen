{"version":3,"sources":["services/index.js","services/login.service.js","components/LoginForm.tsx","components/Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["apiService","axios","create","baseURL","headers","authorizeUser","data","a","post","response","results","IconWrapper","styled","Avatar","Title","h1","Input","TextValidator","ErrorMessage","p","LoginForm","setLogged","useState","email","setEmail","password","setPassword","error","setError","useEffect","ValidatorForm","addValidationRule","test","logIn","authToken","localStorage","setItem","Container","maxWidth","onSubmit","label","autoComplete","autoFocus","fullWidth","onChange","event","target","value","name","variant","validators","errorMessages","type","Button","color","Navigation","Typography","NavigationLink","Link","Menu","href","onClick","preventDefault","removeItem","App","isLogged","getItem","className","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.351a2e30.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst apiService = axios.create({\r\n  baseURL: 'https://guarded-shore-29819.herokuapp.com/',\r\n  headers: {\r\n    \"Access-Control-Allow-Origin\": \"*\"\r\n  },\r\n});\r\n\r\nexport { apiService };\r\n","import { apiService } from './index';\r\n\r\nconst authorizeUser = async (data) => {\r\n  const response = await apiService.post('/', data);\r\n  const results = response.data;\r\n  return results;\r\n}\r\n\r\nexport { authorizeUser }\r\n","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Container, Button, Avatar } from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { authorizeUser } from '../services/login.service';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\n\r\nconst IconWrapper = styled(Avatar)`\r\n  background-color: #FF0000;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  text-align: center;\r\n  font-size: 24px;\r\n  margin: 10px 0;\r\n`;\r\n\r\nconst Input = styled(TextValidator)`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst ErrorMessage = styled.p`\r\n  font-size: 14px;\r\n  color: red;\r\n  text-align: center;\r\n`\r\n\r\nexport const LoginForm = ({ setLogged }: { setLogged: (isLogged: boolean) => void }): JSX.Element => {\r\n  const [email, setEmail] = useState<string>('');\r\n  const [password, setPassword] = useState<string>('');\r\n  const [error, setError] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    ValidatorForm.addValidationRule('validatePassword', () => {\r\n      const passPattern = /^(?=.*\\d)(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\r\n\r\n      if (passPattern.test(password)) return true;\r\n      return false;\r\n    })\r\n  });\r\n\r\n  const logIn = async (): Promise<any> => {\r\n    try {\r\n      const { authToken } = await authorizeUser({ email, password });\r\n      localStorage.setItem('authToken', authToken);\r\n      setError(false);\r\n      setLogged(true);\r\n    } catch (error) {\r\n      setError(true);\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <Container maxWidth=\"xs\">\r\n      <IconWrapper>\r\n        <LockOutlinedIcon />\r\n      </IconWrapper>\r\n      <Title>Sign In</Title>\r\n      <ValidatorForm onSubmit={logIn}>\r\n        <Input\r\n          label=\"Email Address\"\r\n          autoComplete=\"email\"\r\n          autoFocus\r\n          fullWidth\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => setEmail(event.target.value)}\r\n          name=\"email\"\r\n          value={email}\r\n          variant=\"outlined\"\r\n          validators={['required', 'isEmail']}\r\n          errorMessages={['this field is required', 'email is not valid']}\r\n        />\r\n        <Input\r\n          label=\"Password\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => setPassword(event.target.value)}\r\n          name=\"password\"\r\n          type=\"password\"\r\n          validators={['validatePassword', 'required']}\r\n          errorMessages={['this field is required']}\r\n          value={password}\r\n        />\r\n        {error? <ErrorMessage>Wrong email or password</ErrorMessage> : ''}\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Sign In\r\n        </Button>\r\n      </ValidatorForm>\r\n    </Container>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Typography, Link } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\nconst Navigation = styled(Typography)`\r\n  display: flex;\r\n  justify-content: center;\r\n  border: 1px solid #000;\r\n  padding: 5px 0;\r\n`\r\n\r\nconst NavigationLink = styled(Link)`\r\n  margin: 0 5px;\r\n`\r\n\r\nexport const Menu = ({setLogged}: {setLogged: (isLogged: boolean) => void}): JSX.Element => {\r\n  const logOut = (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\r\n    event.preventDefault();\r\n    localStorage.removeItem('authToken');\r\n    setLogged(false);\r\n  };\r\n\r\n  return (\r\n    <Navigation>\r\n      <NavigationLink href=\"#\">Item1</NavigationLink>\r\n      <NavigationLink href=\"#\">Item2</NavigationLink>\r\n      <NavigationLink href=\"#\" onClick={logOut}>Logout</NavigationLink>\r\n    </Navigation>\r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { LoginForm } from './components/LoginForm'\r\nimport { Menu } from './components/Menu';\r\nimport styled from 'styled-components';\r\n\r\nconst Title = styled.h1`\r\n  text-align: center;\r\n`;\r\n\r\nfunction App() {\r\n  const [isLogged, setLogged] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if(localStorage.getItem('authToken')) setLogged(true);\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!isLogged ? \r\n        <LoginForm setLogged={setLogged}/> :\r\n        <React.Fragment>\r\n          <Menu setLogged={setLogged}/>\r\n          <Title>You are logged in</Title>\r\n        </React.Fragment>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}